name: Java CI with Gradle
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: build

      - name: Get JAR_FILE
        id: jarfile
        run: |
          JAR_FILE=$(ls build/libs/*.jar | grep -v plain | head -n 1)
          echo "JAR_FILE=${JAR_FILE}" >> $GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ${{ env.JAR_FILE }}

  deploy:
  needs: build
  runs-on: ubuntu-latest
  steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: app
        path: build/libs/

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.AWS_EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Copy JAR to EC2
      run: |
        JAR_FILE=$(ls build/libs/*.jar | head -n 1)
        scp -i ~/.ssh/id_rsa \
          -o StrictHostKeyChecking=no \
          $JAR_FILE \
          ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:/home/${{ secrets.AWS_EC2_USER }}/
        
    - name: Restart Spring Application on EC2
      run: |
        JAR_FILE=$(basename $(ls build/libs/*.jar | head -n 1))
        ssh -i ~/.ssh/id_rsa \
          -o StrictHostKeyChecking=no \
          ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
          pgrep java | xargs kill -9;
          nohup java -jar /home/${{ secrets.AWS_EC2_USER }}/$JAR_FILE > app.log 2>&1 &
        EOF

    - name: Cleanup
      run: rm -f ~/.ssh/id_rsa
